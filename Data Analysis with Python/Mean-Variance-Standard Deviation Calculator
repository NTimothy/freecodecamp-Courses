import numpy as np

def calculate(list, test=False):
    # Creates 2D Numpy array of 9+ Numbers
    if len(list) >= 9:
        matrix = np.matrix([list[0:3],list[3:6],list[6:9]])
    else:
        raise ValueError("List must contain nine numbers.")

    # Calculates mean in 2 axis and flattened
    mean_ax1 = np.mean(matrix, axis=0).tolist()[0]
    mean_ax2 = []
    mean_ax2_temp = np.mean(matrix, axis=1).tolist()
    for i in mean_ax2_temp:
        mean_ax2.append(i[0])
    mean = [mean_ax1, mean_ax2, np.mean(matrix)]

    # Calculate Variance
    var_ax1 = np.var(matrix, 0).tolist()[0]
    var_ax2_temp = np.var(matrix, 1).tolist()
    var_ax2 = []
    for i in var_ax2_temp:
        var_ax2.append(i[0])

    var = [var_ax1, var_ax2, np.var(matrix)]

    # Calculate Standard Deviation
    std_ax1 = np.std(matrix, 0).tolist()[0]
    std_ax2_temp = np.std(matrix, 1).tolist()
    std_ax2 = []
    for i in std_ax2_temp:
        std_ax2.append(i[0])
    std = [std_ax1, std_ax2, np.std(matrix)]

    # Calculate Max
    max_ax1 = np.max(matrix, 0).tolist()[0]
    max_ax2_temp = np.max(matrix, 1).tolist()
    max_ax2 = []
    for i in max_ax2_temp:
        max_ax2.append(i[0])
    max = [max_ax1, max_ax2, np.max(matrix)]

    # Calculate Min
    min_ax1 = np.min(matrix, 0).tolist()[0]
    min_ax2_temp = np.min(matrix, 1).tolist()
    min_ax2 = []
    for i in min_ax2_temp:
        min_ax2.append(i[0])
    min = [min_ax1, min_ax2, np.min(matrix)]

    # Calculate Sum
    sum_ax1 = np.sum(matrix, 0).tolist()[0]
    sum_ax2_temp = np.sum(matrix, 1).tolist()
    sum_ax2 = []
    for i in sum_ax2_temp:
        sum_ax2.append(i[0])
    sum = [sum_ax1, sum_ax2, np.sum(matrix)]

    ans = {
        'mean': mean,
        'variance': var,
        'standard deviation': std,
        'max': max,
        'min': min,
        'sum': sum
    }

    if test:
        print(matrix)
        print(mean)
        print(var)
        print(std)
        print(max)
        print(min)
        print(sum)
    return ans



def test():
    test = [0,1,2,3,4,5,6,7,8]
    calculate(test, False)

